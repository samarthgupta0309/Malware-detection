import tensorflow
import numpy as np
from tensorflow import keras
from sklearn.metrics import accuracy_score, classification_report

class Evaluation:
    """
    class for Evaluation purpose

    """
    def __init__(self, file_object, logger_object):
        self.file_object = file_object
        self.logger_object = logger_object
    
    def best_model_dnn(self, X_valid, y_valid):
        '''
        Finding the best model using diiferent combination of deep learning model
        Argument : X_valid, y_valid
        '''
        self.logger_object.log(self.file_object, "Started : model_dispatcher -> best_model_dnn")
        try:
            self.logger_object.log(self.file_object, "Validating the DNN model having units_1: 48 dropout_1: 0.05 units_2: 80 dropout_2: 0.5 learning_rate: 0.001 Score: 0.08524768551190694 ")
            DNN_model = keras.models.load_model("model_find/dnn_2layer.h5")
            pred = DNN_model.predict(X_valid)
            pred = np.argmax(pred, axis=1)
            acc = accuracy_score(y_valid, pred)
            self.logger_object.log(self.file_object, "accuracy score of DNN model "+ str(acc))
            classif_rep = classification_report(y_valid, pred)
            self.logger_object.log(self.file_object, "classification report " + str(classif_rep))
        except Exception as e:
            self.logger_object.log(self.file_object, "Failed best_model_dnn Evaluation ")
            raise Exception
