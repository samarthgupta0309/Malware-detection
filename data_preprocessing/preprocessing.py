import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split

class Preprocessor:
    '''
    Clean and transform data
    functions : 

    '''
    def __init__(self, file_object, logger_object):
        self.file_object = file_object
        self.logger_object = logger_object

    def clean(self, data):
        '''
        clean the data column TelephonyManager.getSimCountryIso
        has '1' '0' ? 1 0
        '''
        self.logger_object.log(self.file_object, 'Started : Preprocessor -> clean')
        try:
            colm = ['TelephonyManager.getSimCountryIso']
            data.drop(colm, axis=1, inplace = True)
            self.logger_object.log(self.file_object, 'Success : Clean of TelephonyManager.getSimCountryIso')
        except Exception as e:
            self.logger_object.log(self.file_object, 'Failure : Clean of TelephonyManager.getSimCountryIso')
            raise Exception()
        return data
    def encodeCatFeature(self, data):
        '''
        Encode categorical feature into values
        '''
        self.logger_object.log(self.file_object, 'Started : Preprocessor -> encodeCatFeature')
        try :
            data['class'].replace(dict.fromkeys(['S'], 1), inplace = True)
            data['class'].replace(dict.fromkeys(['B'], 0), inplace = True)
            self.logger_object.log(self.file_object, 'Success : Preprocessing of categorical vairable')
            return data
        except Exception as e:
            self.logger_object.log(self.file_object, 'Failure : Preprocessing of categorical vairable'+str(e))
            raise Exception()
    
    def drop_column(self, data, column):
        '''
        Drop the column not needed
        param : 
            - data - csv file 
            - column - column name to be droped from the data
        '''
        self.logger_object.log(self.file_object, 'Started : Preprocessor -> drop_column')
        self.data = data
        self.column = column
        try:
            self.data.drop(self.column, axis=1, inplace = True)
            self.logger_object.log(self.file_object, 'Success : Removed column')
            return self.data
        except Exception as e:
            self.logger_object.log(self.file_object, "Failure : Removed column "+ str(e))
            raise Exception()
    
    def check_null(self, data):
        self.logger_object.log(self.file_object, 'Started : Preprocessor -> check_null')
        self.null_present = False
        try:
            self.null_count = data.isna().sum()
            self.null_column = []
            for col, val in zip(list(data.columns), self.null_count):
                if val > 0:
                    self.null_present = True
                    self.null_column.append(col)
            if(self.null_present):
                self.logger_object.log(self.file_object, "Null columns : ")
                for col in self.null_column:
                    # print(f"{col} ")
                    self.logger_object.log(self.file_object," "+str(col))
            self.logger_object.log(self.file_object, "Success : check_null completed")
            return self.null_column
        except Exception as e:
            self.logger_object.log(self.file_object, "Failure : check_null "+ str(e))

    def split(self, X, y):
        '''
        Split train test in ratio X_train, X_test, y_train, y_test
        train : test ratio   70:30
        param : 
            - X - data excluding null value
            - y - target
        '''
        self.logger_object.log(self.file_object, "Started : Preprocessor -> split")
        try:
            self.X_train, self.X_test, self.y_train, self.y_test = train_test_split(X, y, test_size=0.3, random_state=42)
            self.logger_object.log(self.file_object, "Success : Split Completed")
            return self.X_train, self.X_test, self.y_train, self.y_test
        except Exception as e:
            self.logger_object.log(self.file_object, "Failure : split uncompleted")
            raise Exception() 

